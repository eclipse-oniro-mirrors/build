# Copyright 2013 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/clang/clang.gni")
import("//build/config/ohos/config.gni")
import("//build/rust/rustc_toolchain.gni")
import("//build/toolchain/gcc_toolchain.gni")

declare_args() {
  # Whether unstripped binaries, i.e. compiled with debug symbols, should be
  # considered runtime_deps rather than stripped ones.
  ohos_unstripped_runtime_outputs = true
  ohos_extra_cflags = ""
  ohos_extra_cppflags = ""
  ohos_extra_cxxflags = ""
  ohos_extra_asmflags = ""
  ohos_extra_ldflags = ""
}

# The ohos clang toolchains share most of the same parameters, so we have this
# wrapper around gcc_toolchain to avoid duplication of logic.
#
# Parameters:
#  - toolchain_root
#      Path to cpu-specific toolchain within the ndk.
#  - sysroot
#      Sysroot for this architecture.
#  - lib_dir
#      Subdirectory inside of sysroot where libs go.
#  - binary_prefix
#      Prefix of compiler executables.
template("ohos_clang_toolchain") {
  gcc_toolchain(target_name) {
    assert(defined(invoker.toolchain_args),
           "toolchain_args must be defined for ohos_clang_toolchain()")
    toolchain_args = invoker.toolchain_args
    toolchain_args.current_os = "ohos"
    rust_abi_target = invoker.rust_abi_target

    # Output linker map files for binary size analysis.
    enable_linker_map = true

    ohos_libc_dir =
        rebase_path(invoker.sysroot + "/" + invoker.lib_dir, root_build_dir)
    libs_section_prefix = "${ohos_libc_dir}/Scrt1.o"
    libs_section_prefix += " ${ohos_libc_dir}/crti.o"
    libs_section_postfix = "${ohos_libc_dir}/crtn.o"

    if (invoker.target_name == "ohos_clang_arm") {
      abi_target = "arm-linux-ohos"
    } else if (invoker.target_name == "ohos_clang_arm64") {
      abi_target = "aarch64-linux-ohos"
    } else if (invoker.target_name == "ohos_clang_x86_64") {
      abi_target = "x86_64-linux-ohos"
    }

    clang_rt_dir =
        rebase_path("${clang_lib_base_path}/${abi_target}", root_build_dir)
    solink_libs_section_prefix = "${ohos_libc_dir}/crti.o"
    solink_libs_section_prefix += " ${clang_rt_dir}/clang_rt.crtbegin.o"
    solink_libs_section_postfix = "${ohos_libc_dir}/crtn.o"
    solink_libs_section_postfix += " ${clang_rt_dir}/clang_rt.crtend.o"

    _prefix = rebase_path("${clang_base_path}/bin", root_build_dir)
    cc = "${_prefix}/clang"
    cxx = "${_prefix}/clang++"
    ar = "${_prefix}/llvm-ar"
    ld = cxx
    readelf = "${_prefix}/llvm-readobj"
    nm = "${_prefix}/llvm-nm"
    if (!is_debug) {
      strip = rebase_path("${clang_base_path}/bin/llvm-strip", root_build_dir)
      use_unstripped_as_runtime_outputs = ohos_unstripped_runtime_outputs
    }
    extra_cflags = ohos_extra_cflags
    extra_cppflags = ohos_extra_cppflags
    extra_cxxflags = ohos_extra_cxxflags
    extra_asmflags = ohos_extra_asmflags
    extra_ldflags = ohos_extra_ldflags

    # Don't use .cr.so for loadable_modules since they are always loaded via
    # absolute path.
    loadable_module_extension = ".so"
    rust_abi_target = invoker.rust_abi_target
    stdlib_path = "${rust_path}/lib/rustlib/${rust_abi_target}/lib"
    std_dylib_path = rebase_path(
            get_label_info("//build/rust:libstd.dylib.so", "target_out_dir"),
            root_build_dir)
    if (rust_abi_target == "arm-linux-ohos") {
      stdlibs = "--extern 'noprelude:alloc=$stdlib_path/liballoc-3b52b93c4ca8a5bd.rlib' --extern 'noprelude:compiler_builtins=$stdlib_path/libcompiler_builtins-b9ee818e172f8741.rlib' --extern 'noprelude:core=$stdlib_path/libcore-7286fdc02c41072a.rlib' --extern 'noprelude:cfg_if=$stdlib_path/libcfg_if-3035f6fd06fe6ec9.rlib' --extern 'noprelude:proc_macro=$stdlib_path/libproc_macro-4684c24756a7fd30.rlib' --extern 'noprelude:getopts=$stdlib_path/libgetopts-d95f4426b4470457.rlib' --extern 'noprelude:panic_unwind=$stdlib_path/libpanic_unwind-6bf3d049ede235ab.rlib' --extern 'noprelude:hashbrown=$stdlib_path/libhashbrown-a0e8c87c5c49d8ae.rlib' --extern 'noprelude:libc=$stdlib_path/liblibc-46a258016f0c70b0.rlib' --extern 'noprelude:panic_abort=$stdlib_path/libpanic_abort-5e632aaeca04e386.rlib' --extern 'noprelude:rustc_demangle=$stdlib_path/librustc_demangle-aff4ef91724960ce.rlib' --extern 'noprelude:std_detect=$stdlib_path/libstd_detect-a83355b65181d20c.rlib' --extern 'noprelude:unwind=$stdlib_path/libunwind-f36b85fd9f3a6350.rlib' --extern 'noprelude:std=$stdlib_path/libstd-a4ed09c4b860e683.rlib' --extern 'std=$std_dylib_path/libstd.dylib.so' --extern 'test=$stdlib_path/libtest-7a70af01540caacc.rlib'"
      cc_command_args = "--target=${rust_abi_target} -Clinker=$cxx -Clink-arg=-lunwind -Clink-arg=-fuse-ld=lld -Clink-arg=-v -Clink-arg=--target=${abi_target} -Clink-arg=--sysroot=$musl_path -C target-feature=-crt-static -L $musllib -L${clang_base_path}/lib/${abi_target}/c++"
    } else if (rust_abi_target == "aarch64-linux-ohos") {
      stdlibs = "--extern 'noprelude:alloc=$stdlib_path/liballoc-3cbe585baad3a5fc.rlib' --extern 'noprelude:compiler_builtins=$stdlib_path/libcompiler_builtins-fad08d9869c5b095.rlib' --extern 'noprelude:core=$stdlib_path/libcore-b563ca2bb1f3a9b9.rlib' --extern 'noprelude:panic_unwind=$stdlib_path/libpanic_unwind-ca4b43df3d225383.rlib' --extern 'noprelude:proc_macro=$stdlib_path/libproc_macro-5a595648a0be3c0f.rlib' --extern 'noprelude:cfg_if=$stdlib_path/libcfg_if-0348afc0a2e11309.rlib' --extern 'noprelude:getopts=$stdlib_path/libgetopts-21d8264fb2f1145a.rlib' --extern 'noprelude:hashbrown=$stdlib_path/libhashbrown-33ffcdce1b31e3f4.rlib' --extern 'noprelude:libc=$stdlib_path/liblibc-62101b20a1ef3a11.rlib' --extern 'noprelude:panic_abort=$stdlib_path/libpanic_abort-14e86f5db808766f.rlib' --extern 'noprelude:rustc_demangle=$stdlib_path/librustc_demangle-7093163c24b92e64.rlib' --extern 'noprelude:unwind=$stdlib_path/libunwind-1d5e59be042cf0eb.rlib' --extern 'noprelude:std_detect=$stdlib_path/libstd_detect-b38193287ca2a683.rlib' --extern 'noprelude:std=$stdlib_path/libstd-37747be394d9d22c.rlib' --extern 'std=$std_dylib_path/libstd.dylib.so' --extern 'test=$stdlib_path/libtest-03fc9cb39b7ffba9.rlib'"
      cc_command_args = "--target=${rust_abi_target} -Clinker=$cxx -Clink-arg=-lunwind -Clink-arg=-fuse-ld=lld -Clink-arg=-v -Clink-arg=--target=${abi_target} -Clink-arg=--sysroot=$musl_path -C target-feature=-crt-static -L $musllib -L${clang_base_path}/lib/${abi_target}/c++"
    } else if (rust_abi_target == "x86_64-unknown-linux-gnu") {
      stdlibs = "--extern 'noprelude:alloc=$stdlib_path/liballoc-703c7b85089a09a0.rlib' --extern 'noprelude:cfg_if=$stdlib_path/libcfg_if-21f2d423d0911358.rlib' --extern 'noprelude:compiler_builtins=$stdlib_path/libcompiler_builtins-f742a15c5765001e.rlib' --extern 'noprelude:core=$stdlib_path/libcore-95c594ea0242ac01.rlib' --extern 'noprelude:getopts=$stdlib_path/libgetopts-5ffe1cc2a38f4946.rlib' --extern 'noprelude:libc=$stdlib_path/liblibc-05324fd7ac514b81.rlib' --extern 'noprelude:libhashbrown=$stdlib_path/libhashbrown-17fad901074caeb6.rlib' --extern 'noprelude:panic_abort=$stdlib_path/libpanic_abort-b27aba459f11402c.rlib' --extern 'noprelude:panic_unwind=$stdlib_path/libpanic_unwind-9d8ca548a7441307.rlib' --extern 'noprelude:proc_macro=$stdlib_path/libproc_macro-c7cdf527cc642256.rlib' --extern 'noprelude:rustc_demangle=$stdlib_path/librustc_demangle-46c8c3eb5be77633.rlib' --extern 'noprelude:unwind=$stdlib_path/libunwind-7372497c1f602d57.rlib' --extern 'noprelude:std=$stdlib_path/libstd-c244726431624c96.rlib' --extern 'std=$std_dylib_path/libstd.dylib.so' --extern 'test=$stdlib_path/libtest-03f4c43f2c45172b.rlib'"
      cc_command_args = "--target=${rust_abi_target} -Clinker=$cxx -Clink-arg=-fuse-ld=lld -Clink-arg=-v -Clink-arg=--target=${abi_target}"
    }
  }
}
