# Copyright (c) 2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/config/c++/c++.gni")
import("//build/config/clang/clang.gni")
import("//build/config/sysroot.gni")

template("rust_autocxx") {
  assert(defined(invoker.sources),
         "Must specify the Rust file(s) to use as sources.")
  ohos_target_name = target_name
  ohos_testonly = false
  if (defined(invoker.testonly)) {
    ohos_testonly = invoker.testonly
  }
  if (defined(invoker.visibility)) {
    ohos_visibility = invoker.visibility
  }
  _deps = []
  if (defined(invoker.deps)) {
    _deps += invoker.deps
  }

  action_foreach("${ohos_target_name}") {
    testonly = ohos_testonly
    visibility = [ ":${ohos_target_name}" ]
    if (defined(ohos_visibility)) {
      visibility += ohos_visibility
    }

    sources = invoker.sources
    if (defined(invoker.configs)) {
      configs = invoker.configs
    }

    if (defined(invoker.subsystem_name) && defined(invoker.part_name)) {
      subsystem_name = invoker.subsystem_name
      part_name = invoker.part_name
    } else if (defined(invoker.part_name)) {
      part_name = invoker.part_name
      _part_subsystem_info_file =
          "$root_build_dir/build_configs/parts_info/part_subsystem.json"
      _arguments = [
        "--part-name",
        part_name,
        "--part-subsystem-info-file",
        rebase_path(_part_subsystem_info_file, root_build_dir),
      ]
      get_subsystem_script = "//build/templates/common/get_subsystem_name.py"
      subsystem_name =
          exec_script(get_subsystem_script, _arguments, "trim string")
    } else if (defined(invoker.subsystem_name)) {
      subsystem_name = invoker.subsystem_name
      part_name = subsystem_name
    } else {
      subsystem_name = "common"
      part_name = subsystem_name
    }

    ohos_output_prefix = "{{source_name_part}}"
    ohos_output_dir = "{{source_gen_dir}}/{{source_file_part}}"
    ohos_out_gen0_cc = "$ohos_output_dir/${ohos_output_prefix}_gen0.cc"
    ohos_out_gen1_cc = "$ohos_output_dir/${ohos_output_prefix}_gen1.cc"
    ohos_out_gen0_rs = "$ohos_output_dir/gen0.include.rs"
    ohos_out_gen0_h = "$ohos_output_dir/gen0.h"
    ohos_output_h = "{{source_gen_dir}}/{{source_file_part}}.h"

    ohos_autocxx_gen_target =
        "//third_party/rust/autocxx_gen/v0_23:autocxx_gen($host_toolchain)"

    ohos_autocxx_gen_obj_dir =
        get_label_info(ohos_autocxx_gen_target, "root_out_dir")
    ohos_autocxx_gen_executable = rebase_path(
            "${ohos_autocxx_gen_obj_dir}/${subsystem_name}/${part_name}/autocxx_gen")
    llvm_config_path =
        "//prebuilts/clang/ohos/linux-x86_64/llvm/bin/llvm-config"
    clang_path = "//prebuilts/clang/ohos/linux-x86_64/llvm/bin/clang"

    if (is_win) {
      ohos_autocxx_gen_executable =
          rebase_path("${ohos_autocxx_gen_executable}.exe")
    }

    script = rebase_path("//build/templates/rust/rust_autocxx_gen.py")
    inputs = [
      ohos_autocxx_gen_executable,
      script,
    ]
    outputs = [
      ohos_out_gen0_cc,
      ohos_out_gen0_rs,
      ohos_out_gen1_cc,
      ohos_out_gen0_h,
      ohos_output_h,
    ]

    deps = [ ohos_autocxx_gen_target ]

    deps += _deps

    args = [
      "--exe",
      ohos_autocxx_gen_executable,
      "--llvm-config-path",
      rebase_path(llvm_config_path),
      "--clang-path",
      rebase_path(clang_path),
      "--outdir",
      ohos_output_dir,
      "--cxx-h-path",
      "third_party/rust/cxx/v1/crate/include/",
      "--ld-library-path",
      rebase_path(clang_base_path + "/lib"),
      "--output-prefix",
      ohos_output_prefix,
      "--header",
      ohos_output_h,
      "--source",
      "{{source}}",
    ]

    if (invoker.export_symbols) {
      args += [ "--cxx-impl-annotations" ]
      if (is_win) {
        args += [ "__declspec(dllexport)" ]
      } else {
        args += [ "__attribute__((visibility(\"default\")))" ]
      }
    }

    args += [
      "--",
      "{{defines}}",
      "{{include_dirs}}",
      "{{cflags}}",
      "{{cflags_cc}}",
      "-fparse-all-comments",
      "-fvisibility=default",

      # "-fno-visibility-inlines-hidden",
    ]
  }
}
