#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (c) 2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os
import sys
import argparse
import re
import stat


LIB_BASENAME_RE = re.compile(r"lib(.*)\.(?:lib|so)$", re.I)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--output", help="Path to rsp file", required=True)
    parser.add_argument(
        "--depfile", help="Path to write depfile", required=True)
    parser.add_argument("--clang-libs-dir",
                        help="Where to find clang and LLVM libs",
                        required=True)
    args = parser.parse_args()
    with os.fdopen(os.open(args.depfile,
                           os.O_RDWR | os.O_CREAT, stat.S_IWUSR | stat.S_IRUSR),
                   'w', encoding='utf-8') as depfile:
        depfile.write("%s:" % args.output)
        with os.fdopen(os.open(args.output,
                               os.O_RDWR | os.O_CREAT, stat.S_IWUSR | stat.S_IRUSR),
                       'w', encoding='utf-8') as outputs:
            outputs.write(
                "//! Generated by build/rust/clanglibs/find_clanglibs.py\n")
            outputs.write("//! @generated\n")
            for file in os.listdir(args.clang_libs_dir):
                match = LIB_BASENAME_RE.match(file)
                if match:
                    basename = match.group(1)
                    outputs.write("#[link(name=\"{}\")]\n".format(basename))
                    full_path = os.path.join(args.clang_libs_dir, file)
                    depfile.write(" {}\n".format(full_path))
            outputs.write("#[link(name=\"stdc++\")]\n")
            outputs.write("#[link(name=\"z\")]\n")
            outputs.write("extern {}\n")


if __name__ == '__main__':
    sys.exit(main())
